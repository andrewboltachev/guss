// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

type Round = {
  id: number
  round: string
  author: string
}

type RoundsApiResponse = {
  rounds: Round[]
  total: number
  skip: number
  limit: number
}

// Define a service using a base URL and expected endpoints
export const roundsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com/rounds" }),
  reducerPath: "roundsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Rounds"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `RoundsApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getRounds: build.query<RoundsApiResponse, number>({
      query: (limit = 10) => `?limit=${limit.toString()}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (_result, _error, id) => [{ type: "Rounds", id }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `roundsApiSlice.endpoints.getRounds.useQuery`
export const { useGetRoundsQuery } = roundsApiSlice
